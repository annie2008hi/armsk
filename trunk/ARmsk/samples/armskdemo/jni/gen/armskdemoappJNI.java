/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.31
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.ct.armsk.jni;

import com.opencv.jni.*; //import the android-opencv jni wrappers

class armskdemoappJNI {

	static {
		try {
			//load the cvcamera library, make sure that libcvcamera.so is in your <project>/libs/armeabi directory
			//so that android sdk automatically installs it along with the app.
			
			//the android-opencv lib must be loaded first inorder for the cvcamera
			//lib to be found
			//check the apk generated, by opening it in an archive manager, to verify that
			//both these libraries are present
			System.loadLibrary("android-opencv");
			System.loadLibrary("armskdemoapp");
		} catch (UnsatisfiedLinkError e) {
			//badness
			throw e;
		}
	}


  public final static native long new_Processor();
  public final static native void delete_Processor(long jarg1);
  public final static native void Processor_processAR(long jarg1, Processor jarg1_, int jarg2, long jarg3, image_pool jarg3_, int jarg4, String jarg5);
  public final static native void Processor_doIteration(long jarg1, Processor jarg1_, long jarg2, Mat jarg2_, long jarg3, Mat jarg3_, boolean jarg4, long jarg5, long jarg6, Mat jarg6_, long jarg7, long jarg8, long jarg9, int jarg10, boolean jarg11, double jarg12, long jarg13);
  public final static native void Processor_flannFindPairs(long jarg1, Processor jarg1_, long jarg2, long jarg3, Mat jarg3_, long jarg4, long jarg5, Mat jarg5_, long jarg6);
  public final static native int Processor_getMatcherFilterType(long jarg1, Processor jarg1_, long jarg2);
  public final static native void Processor_simpleMatching(long jarg1, Processor jarg1_, long jarg2, long jarg3, Mat jarg3_, long jarg4, Mat jarg4_, long jarg5);
  public final static native void Processor_crossCheckMatching(long jarg1, Processor jarg1_, long jarg2, long jarg3, Mat jarg3_, long jarg4, Mat jarg4_, long jarg5, int jarg6);
  public final static native void Processor_warpPerspectiveRand(long jarg1, Processor jarg1_, long jarg2, Mat jarg2_, long jarg3, Mat jarg3_, long jarg4, Mat jarg4_, long jarg5);
  public final static native void Processor_drawText(long jarg1, Processor jarg1_, int jarg2, long jarg3, image_pool jarg3_, String jarg4);
  public final static native void Processor_initiateTemplate(long jarg1, Processor jarg1_, String jarg2);
  public final static native void Processor_makeTemplate(long jarg1, Processor jarg1_, String jarg2, int jarg3, long jarg4, image_pool jarg4_);
  public final static native void Processor_detectAndDrawFeatures(long jarg1, Processor jarg1_, int jarg2, long jarg3, image_pool jarg3_);
  public final static native int Processor_getNumberKeypoints(long jarg1, Processor jarg1_);
}
