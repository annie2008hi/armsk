/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.31
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */


#ifdef __cplusplus
template<class T> class SwigValueWrapper {
    T *tt;
public:
    SwigValueWrapper() : tt(0) { }
    SwigValueWrapper(const SwigValueWrapper<T>& rhs) : tt(new T(*rhs.tt)) { }
    SwigValueWrapper(const T& t) : tt(new T(t)) { }
    ~SwigValueWrapper() { delete tt; } 
    SwigValueWrapper& operator=(const T& t) { delete tt; tt = new T(t); return *this; }
    operator T&() const { return *tt; }
    T *operator&() { return tt; }
private:
    SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
};
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC)
#   if (__SUNPRO_CC <= 0x560)
#     define SWIGTEMPLATEDISAMBIGUATOR template
#   else
#     define SWIGTEMPLATEDISAMBIGUATOR 
#   endif
# else
#   define SWIGTEMPLATEDISAMBIGUATOR 
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif


/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTELC__)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" } };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else


#include "ARmsk.h"
#include "image_pool.h"
	using namespace cv;
	using namespace std;
	

#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jlong JNICALL Java_com_ct_armsk_jni_armskdemoappJNI_new_1ARmsk(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ARmsk *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ARmsk *)new ARmsk();
  *(ARmsk **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ct_armsk_jni_armskdemoappJNI_delete_1ARmsk(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ARmsk *arg1 = (ARmsk *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ARmsk **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT void JNICALL Java_com_ct_armsk_jni_armskdemoappJNI_ARmsk_1processAR(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_, jint jarg4, jstring jarg5) {
  ARmsk *arg1 = (ARmsk *) 0 ;
  int arg2 ;
  image_pool *arg3 = (image_pool *) 0 ;
  int arg4 ;
  char *arg5 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(ARmsk **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(image_pool **)&jarg3; 
  arg4 = (int)jarg4; 
  arg5 = 0;
  if (jarg5) {
    arg5 = (char *)jenv->GetStringUTFChars(jarg5, 0);
    if (!arg5) return ;
  }
  (arg1)->processAR(arg2,arg3,arg4,(char const *)arg5);
  if (arg5) jenv->ReleaseStringUTFChars(jarg5, (const char *)arg5);
}


SWIGEXPORT void JNICALL Java_com_ct_armsk_jni_armskdemoappJNI_ARmsk_1loadImage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3, jlong jarg4, jobject jarg4_) {
  ARmsk *arg1 = (ARmsk *) 0 ;
  IMAGEDATA *arg2 = 0 ;
  int arg3 ;
  image_pool *arg4 = (image_pool *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(ARmsk **)&jarg1; 
  arg2 = *(IMAGEDATA **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "IMAGEDATA & reference is null");
    return ;
  } 
  arg3 = (int)jarg3; 
  arg4 = *(image_pool **)&jarg4; 
  (arg1)->loadImage(*arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_com_ct_armsk_jni_armskdemoappJNI_ARmsk_1detectKeypoints(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ARmsk *arg1 = (ARmsk *) 0 ;
  IMAGEDATA *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ARmsk **)&jarg1; 
  arg2 = *(IMAGEDATA **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "IMAGEDATA & reference is null");
    return ;
  } 
  (arg1)->detectKeypoints(*arg2);
}


SWIGEXPORT void JNICALL Java_com_ct_armsk_jni_armskdemoappJNI_ARmsk_1computeDescriptors(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ARmsk *arg1 = (ARmsk *) 0 ;
  IMAGEDATA *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ARmsk **)&jarg1; 
  arg2 = *(IMAGEDATA **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "IMAGEDATA & reference is null");
    return ;
  } 
  (arg1)->computeDescriptors(*arg2);
}


SWIGEXPORT void JNICALL Java_com_ct_armsk_jni_armskdemoappJNI_ARmsk_1locateTemplate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  ARmsk *arg1 = (ARmsk *) 0 ;
  IMAGEDATA *arg2 = 0 ;
  IMAGEDATA *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ARmsk **)&jarg1; 
  arg2 = *(IMAGEDATA **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "IMAGEDATA & reference is null");
    return ;
  } 
  arg3 = *(IMAGEDATA **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "IMAGEDATA & reference is null");
    return ;
  } 
  (arg1)->locateTemplate(*arg2,*arg3);
}


SWIGEXPORT void JNICALL Java_com_ct_armsk_jni_armskdemoappJNI_ARmsk_1match(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  ARmsk *arg1 = (ARmsk *) 0 ;
  IMAGEDATA *arg2 = 0 ;
  IMAGEDATA *arg3 = 0 ;
  vector<int > *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ARmsk **)&jarg1; 
  arg2 = *(IMAGEDATA **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "IMAGEDATA & reference is null");
    return ;
  } 
  arg3 = *(IMAGEDATA **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "IMAGEDATA & reference is null");
    return ;
  } 
  arg4 = *(vector<int > **)&jarg4;
  if(!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "vector<int > & reference is null");
    return ;
  } 
  (arg1)->match(*arg2,*arg3,*arg4);
}


SWIGEXPORT void JNICALL Java_com_ct_armsk_jni_armskdemoappJNI_ARmsk_1convertToPoints(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  ARmsk *arg1 = (ARmsk *) 0 ;
  IMAGEDATA *arg2 = 0 ;
  vector<Point2f > *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ARmsk **)&jarg1; 
  arg2 = *(IMAGEDATA **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "IMAGEDATA & reference is null");
    return ;
  } 
  arg3 = *(vector<Point2f > **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "vector<Point2f > & reference is null");
    return ;
  } 
  (arg1)->convertToPoints(*arg2,*arg3);
}


SWIGEXPORT void JNICALL Java_com_ct_armsk_jni_armskdemoappJNI_ARmsk_1estimatePose(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jobject jarg4_) {
  ARmsk *arg1 = (ARmsk *) 0 ;
  vector<Point2f > *arg2 = 0 ;
  vector<Point2f > *arg3 = 0 ;
  Mat *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(ARmsk **)&jarg1; 
  arg2 = *(vector<Point2f > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "vector<Point2f > & reference is null");
    return ;
  } 
  arg3 = *(vector<Point2f > **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "vector<Point2f > & reference is null");
    return ;
  } 
  arg4 = *(Mat **)&jarg4;
  if(!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Mat & reference is null");
    return ;
  } 
  (arg1)->estimatePose(*arg2,*arg3,*arg4);
}


SWIGEXPORT void JNICALL Java_com_ct_armsk_jni_armskdemoappJNI_ARmsk_1clearAll(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ARmsk *arg1 = (ARmsk *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ARmsk **)&jarg1; 
  (arg1)->clearAll();
}


SWIGEXPORT void JNICALL Java_com_ct_armsk_jni_armskdemoappJNI_ARmsk_1transformPoints(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4) {
  ARmsk *arg1 = (ARmsk *) 0 ;
  Mat *arg2 = 0 ;
  vector<Point2f > *arg3 = 0 ;
  vector<Point2f > *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ARmsk **)&jarg1; 
  arg2 = *(Mat **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Mat & reference is null");
    return ;
  } 
  arg3 = *(vector<Point2f > **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "vector<Point2f > & reference is null");
    return ;
  } 
  arg4 = *(vector<Point2f > **)&jarg4;
  if(!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "vector<Point2f > & reference is null");
    return ;
  } 
  (arg1)->transformPoints(*arg2,*arg3,*arg4);
}


SWIGEXPORT void JNICALL Java_com_ct_armsk_jni_armskdemoappJNI_ARmsk_1convertTo3D(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  ARmsk *arg1 = (ARmsk *) 0 ;
  vector<Point2f > *arg2 = 0 ;
  vector<Point3d > *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ARmsk **)&jarg1; 
  arg2 = *(vector<Point2f > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "vector<Point2f > & reference is null");
    return ;
  } 
  arg3 = *(vector<Point3d > **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "vector<Point3d > & reference is null");
    return ;
  } 
  (arg1)->convertTo3D(*arg2,*arg3);
}


SWIGEXPORT void JNICALL Java_com_ct_armsk_jni_armskdemoappJNI_ARmsk_1computeProjection(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  ARmsk *arg1 = (ARmsk *) 0 ;
  vector<Point3f > *arg2 = 0 ;
  vector<Point2f > *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ARmsk **)&jarg1; 
  arg2 = *(vector<Point3f > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "vector<Point3f > & reference is null");
    return ;
  } 
  arg3 = *(vector<Point2f > **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "vector<Point2f > & reference is null");
    return ;
  } 
  (arg1)->computeProjection(*arg2,*arg3);
}


SWIGEXPORT void JNICALL Java_com_ct_armsk_jni_armskdemoappJNI_ARmsk_1computeProjectionD(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  ARmsk *arg1 = (ARmsk *) 0 ;
  vector<Point3d > *arg2 = 0 ;
  vector<Point2f > *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ARmsk **)&jarg1; 
  arg2 = *(vector<Point3d > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "vector<Point3d > & reference is null");
    return ;
  } 
  arg3 = *(vector<Point2f > **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "vector<Point2f > & reference is null");
    return ;
  } 
  (arg1)->computeProjectionD(*arg2,*arg3);
}


SWIGEXPORT void JNICALL Java_com_ct_armsk_jni_armskdemoappJNI_ARmsk_1convertToPoints2d(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  ARmsk *arg1 = (ARmsk *) 0 ;
  vector<Point2f > *arg2 = 0 ;
  vector<Point2d > *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ARmsk **)&jarg1; 
  arg2 = *(vector<Point2f > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "vector<Point2f > & reference is null");
    return ;
  } 
  arg3 = *(vector<Point2d > **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "vector<Point2d > & reference is null");
    return ;
  } 
  (arg1)->convertToPoints2d(*arg2,*arg3);
}


SWIGEXPORT jfloat JNICALL Java_com_ct_armsk_jni_armskdemoappJNI_ARmsk_1getElementRotationVector(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jfloat jresult = 0 ;
  ARmsk *arg1 = (ARmsk *) 0 ;
  int arg2 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ARmsk **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (float)(arg1)->getElementRotationVector(arg2);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_com_ct_armsk_jni_armskdemoappJNI_ARmsk_1getElementTranslateVector(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jfloat jresult = 0 ;
  ARmsk *arg1 = (ARmsk *) 0 ;
  int arg2 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ARmsk **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (float)(arg1)->getElementTranslateVector(arg2);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_com_ct_armsk_jni_armskdemoappJNI_ARmsk_1getElementRotationMatrix(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jfloat jresult = 0 ;
  ARmsk *arg1 = (ARmsk *) 0 ;
  int arg2 ;
  int arg3 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ARmsk **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (float)(arg1)->getElementRotationMatrix(arg2,arg3);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ct_armsk_jni_armskdemoappJNI_ARmsk_1renderTemplateOutline(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jlong jarg4, jobject jarg4_) {
  ARmsk *arg1 = (ARmsk *) 0 ;
  Mat arg2 ;
  int arg3 ;
  image_pool *arg4 = (image_pool *) 0 ;
  Mat *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  arg1 = *(ARmsk **)&jarg1; 
  argp2 = *(Mat **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Mat");
    return ;
  }
  arg2 = *argp2; 
  arg3 = (int)jarg3; 
  arg4 = *(image_pool **)&jarg4; 
  (arg1)->renderTemplateOutline(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_com_ct_armsk_jni_armskdemoappJNI_ARmsk_1drawText(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_, jstring jarg4) {
  ARmsk *arg1 = (ARmsk *) 0 ;
  int arg2 ;
  image_pool *arg3 = (image_pool *) 0 ;
  char *arg4 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(ARmsk **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(image_pool **)&jarg3; 
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return ;
  }
  (arg1)->drawText(arg2,arg3,(char const *)arg4);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
}


SWIGEXPORT void JNICALL Java_com_ct_armsk_jni_armskdemoappJNI_ARmsk_1setTemplate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  ARmsk *arg1 = (ARmsk *) 0 ;
  int arg2 ;
  image_pool *arg3 = (image_pool *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(ARmsk **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(image_pool **)&jarg3; 
  (arg1)->setTemplate(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_ct_armsk_jni_armskdemoappJNI_ARmsk_1loadTemplate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ARmsk *arg1 = (ARmsk *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ARmsk **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->loadTemplate((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_com_ct_armsk_jni_armskdemoappJNI_ARmsk_1detectAndDrawFeatures(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  ARmsk *arg1 = (ARmsk *) 0 ;
  int arg2 ;
  image_pool *arg3 = (image_pool *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(ARmsk **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(image_pool **)&jarg3; 
  (arg1)->detectAndDrawFeatures(arg2,arg3);
}


SWIGEXPORT jint JNICALL Java_com_ct_armsk_jni_armskdemoappJNI_ARmsk_1getNumberTemplateKeypoints(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ARmsk *arg1 = (ARmsk *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ARmsk **)&jarg1; 
  result = (int)(arg1)->getNumberTemplateKeypoints();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_ct_armsk_jni_armskdemoappJNI_ARmsk_1getNumberTemplateDescriptors(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ARmsk *arg1 = (ARmsk *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ARmsk **)&jarg1; 
  result = (int)(arg1)->getNumberTemplateDescriptors();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ct_armsk_jni_armskdemoappJNI_ARmsk_1initCorners(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ARmsk *arg1 = (ARmsk *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ARmsk **)&jarg1; 
  (arg1)->initCorners();
}


SWIGEXPORT jfloat JNICALL Java_com_ct_armsk_jni_armskdemoappJNI_ARmsk_1get_1d(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jfloat jresult = 0 ;
  ARmsk *arg1 = (ARmsk *) 0 ;
  int arg2 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ARmsk **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (float)(arg1)->get_d(arg2);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_com_ct_armsk_jni_armskdemoappJNI_ARmsk_1getMatrix(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jfloat jresult = 0 ;
  ARmsk *arg1 = (ARmsk *) 0 ;
  int arg2 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ARmsk **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (float)(arg1)->getMatrix(arg2);
  jresult = (jfloat)result; 
  return jresult;
}


#ifdef __cplusplus
}
#endif

