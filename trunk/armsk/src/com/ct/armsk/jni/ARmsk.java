/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.31
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.ct.armsk.jni;

import com.opencv.jni.Mat;
import com.opencv.jni.image_pool;// import the image_pool interface for playing nice with
// android-opencv

/** ARmsk - for processing images that are stored in an image pool
*/
public class ARmsk {
  private long swigCPtr;
  protected boolean swigCMemOwn;
  public ARmsk(long cPtr, boolean cMemoryOwn) {
	swigCMemOwn = cMemoryOwn;
	swigCPtr = cPtr;
  }
  public static long getCPtr(ARmsk obj) {
	return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if(swigCPtr != 0 && swigCMemOwn) {
      swigCMemOwn = false;
      armskdemoappJNI.delete_ARmsk(swigCPtr);
    }
    swigCPtr = 0;
  }

  public ARmsk() {
    this(armskdemoappJNI.new_ARmsk(), true);
  }

  public void processAR(int input_idx, image_pool pool, int detection_method, String filename) {
    armskdemoappJNI.ARmsk_processAR(swigCPtr, this, input_idx, image_pool.getCPtr(pool), pool, detection_method, filename);
  }

  public void loadImage(SWIGTYPE_p_IMAGEDATA input, int input_idx, image_pool pool) {
    armskdemoappJNI.ARmsk_loadImage(swigCPtr, this, SWIGTYPE_p_IMAGEDATA.getCPtr(input), input_idx, image_pool.getCPtr(pool), pool);
  }

  public void detectKeypoints(SWIGTYPE_p_IMAGEDATA input) {
    armskdemoappJNI.ARmsk_detectKeypoints(swigCPtr, this, SWIGTYPE_p_IMAGEDATA.getCPtr(input));
  }

  public void computeDescriptors(SWIGTYPE_p_IMAGEDATA input) {
    armskdemoappJNI.ARmsk_computeDescriptors(swigCPtr, this, SWIGTYPE_p_IMAGEDATA.getCPtr(input));
  }

  public void locateTemplate(SWIGTYPE_p_IMAGEDATA templateData, SWIGTYPE_p_IMAGEDATA frameData) {
    armskdemoappJNI.ARmsk_locateTemplate(swigCPtr, this, SWIGTYPE_p_IMAGEDATA.getCPtr(templateData), SWIGTYPE_p_IMAGEDATA.getCPtr(frameData));
  }

  public void match(SWIGTYPE_p_IMAGEDATA trainData, SWIGTYPE_p_IMAGEDATA queryData, SWIGTYPE_p_vectorTint_t matches) {
    armskdemoappJNI.ARmsk_match(swigCPtr, this, SWIGTYPE_p_IMAGEDATA.getCPtr(trainData), SWIGTYPE_p_IMAGEDATA.getCPtr(queryData), SWIGTYPE_p_vectorTint_t.getCPtr(matches));
  }

  public void convertToPoints(SWIGTYPE_p_IMAGEDATA input, SWIGTYPE_p_vectorTPoint2f_t points) {
    armskdemoappJNI.ARmsk_convertToPoints(swigCPtr, this, SWIGTYPE_p_IMAGEDATA.getCPtr(input), SWIGTYPE_p_vectorTPoint2f_t.getCPtr(points));
  }

  public void estimatePose(SWIGTYPE_p_vectorTPoint2f_t pointSet1, SWIGTYPE_p_vectorTPoint2f_t pointSet2, Mat homography) {
    armskdemoappJNI.ARmsk_estimatePose(swigCPtr, this, SWIGTYPE_p_vectorTPoint2f_t.getCPtr(pointSet1), SWIGTYPE_p_vectorTPoint2f_t.getCPtr(pointSet2), Mat.getCPtr(homography), homography);
  }

  public void clearAll() {
    armskdemoappJNI.ARmsk_clearAll(swigCPtr, this);
  }

  public void transformPoints(Mat HMatrix, SWIGTYPE_p_vectorTPoint2f_t srcPoints, SWIGTYPE_p_vectorTPoint2f_t dstPoints) {
    armskdemoappJNI.ARmsk_transformPoints(swigCPtr, this, Mat.getCPtr(HMatrix), HMatrix, SWIGTYPE_p_vectorTPoint2f_t.getCPtr(srcPoints), SWIGTYPE_p_vectorTPoint2f_t.getCPtr(dstPoints));
  }

  public void convertTo3D(SWIGTYPE_p_vectorTPoint2f_t planarPoints, SWIGTYPE_p_vectorTPoint3d_t objectPoints) {
    armskdemoappJNI.ARmsk_convertTo3D(swigCPtr, this, SWIGTYPE_p_vectorTPoint2f_t.getCPtr(planarPoints), SWIGTYPE_p_vectorTPoint3d_t.getCPtr(objectPoints));
  }

  public void computeProjection(SWIGTYPE_p_vectorTPoint3f_t objectPoints, SWIGTYPE_p_vectorTPoint2f_t imagePoints) {
    armskdemoappJNI.ARmsk_computeProjection(swigCPtr, this, SWIGTYPE_p_vectorTPoint3f_t.getCPtr(objectPoints), SWIGTYPE_p_vectorTPoint2f_t.getCPtr(imagePoints));
  }

  public void computeProjectionD(SWIGTYPE_p_vectorTPoint3d_t objectPoints, SWIGTYPE_p_vectorTPoint2f_t imagePoints) {
    armskdemoappJNI.ARmsk_computeProjectionD(swigCPtr, this, SWIGTYPE_p_vectorTPoint3d_t.getCPtr(objectPoints), SWIGTYPE_p_vectorTPoint2f_t.getCPtr(imagePoints));
  }

  public void convertToPoints2d(SWIGTYPE_p_vectorTPoint2f_t pointsf, SWIGTYPE_p_vectorTPoint2d_t points) {
    armskdemoappJNI.ARmsk_convertToPoints2d(swigCPtr, this, SWIGTYPE_p_vectorTPoint2f_t.getCPtr(pointsf), SWIGTYPE_p_vectorTPoint2d_t.getCPtr(points));
  }

  public float getElementRotationVector(int i) {
    return armskdemoappJNI.ARmsk_getElementRotationVector(swigCPtr, this, i);
  }

  public float getElementTranslateVector(int i) {
    return armskdemoappJNI.ARmsk_getElementTranslateVector(swigCPtr, this, i);
  }

  public float getElementRotationMatrix(int i, int j) {
    return armskdemoappJNI.ARmsk_getElementRotationMatrix(swigCPtr, this, i, j);
  }

  public void renderTemplateOutline(Mat H12, int input_idx, image_pool pool) {
    armskdemoappJNI.ARmsk_renderTemplateOutline(swigCPtr, this, Mat.getCPtr(H12), H12, input_idx, image_pool.getCPtr(pool), pool);
  }

  public void drawText(int idx, image_pool pool, String text) {
    armskdemoappJNI.ARmsk_drawText(swigCPtr, this, idx, image_pool.getCPtr(pool), pool, text);
  }

  public void setTemplate(int input_idx, image_pool pool) {
    armskdemoappJNI.ARmsk_setTemplate(swigCPtr, this, input_idx, image_pool.getCPtr(pool), pool);
  }

  public void loadTemplate(String filename) {
    armskdemoappJNI.ARmsk_loadTemplate(swigCPtr, this, filename);
  }

  public void detectAndDrawFeatures(int idx, image_pool pool) {
    armskdemoappJNI.ARmsk_detectAndDrawFeatures(swigCPtr, this, idx, image_pool.getCPtr(pool), pool);
  }

  public int getNumberTemplateKeypoints() {
    return armskdemoappJNI.ARmsk_getNumberTemplateKeypoints(swigCPtr, this);
  }

  public int getNumberTemplateDescriptors() {
    return armskdemoappJNI.ARmsk_getNumberTemplateDescriptors(swigCPtr, this);
  }

  public void initCorners() {
    armskdemoappJNI.ARmsk_initCorners(swigCPtr, this);
  }

  public float get_d(int i) {
    return armskdemoappJNI.ARmsk_get_d(swigCPtr, this, i);
  }

}
