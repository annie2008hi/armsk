/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.31
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.ct.armsk.jni;

import com.opencv.jni.*; //import the android-opencv jni wrappers

class armskdemoappJNI {

	static {
		try {
			//load the cvcamera library, make sure that libcvcamera.so is in your <project>/libs/armeabi directory
			//so that android sdk automatically installs it along with the app.
			
			//the android-opencv lib must be loaded first inorder for the cvcamera
			//lib to be found
			//check the apk generated, by opening it in an archive manager, to verify that
			//both these libraries are present
			System.loadLibrary("android-opencv");
			System.loadLibrary("armskdemoapp");
		} catch (UnsatisfiedLinkError e) {
			//badness
			throw e;
		}
	}


  public final static native long new_ARmsk();
  public final static native void delete_ARmsk(long jarg1);
  public final static native void ARmsk_processAR(long jarg1, ARmsk jarg1_, int jarg2, long jarg3, image_pool jarg3_, int jarg4, String jarg5);
  public final static native void ARmsk_loadImage(long jarg1, ARmsk jarg1_, long jarg2, int jarg3, long jarg4, image_pool jarg4_);
  public final static native void ARmsk_detectKeypoints(long jarg1, ARmsk jarg1_, long jarg2);
  public final static native void ARmsk_computeDescriptors(long jarg1, ARmsk jarg1_, long jarg2);
  public final static native void ARmsk_locateTemplate(long jarg1, ARmsk jarg1_, long jarg2, long jarg3);
  public final static native void ARmsk_match(long jarg1, ARmsk jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native void ARmsk_convertToPoints(long jarg1, ARmsk jarg1_, long jarg2, long jarg3);
  public final static native void ARmsk_estimatePose(long jarg1, ARmsk jarg1_, long jarg2, long jarg3, long jarg4, Mat jarg4_);
  public final static native void ARmsk_clearAll(long jarg1, ARmsk jarg1_);
  public final static native void ARmsk_transformPoints(long jarg1, ARmsk jarg1_, long jarg2, Mat jarg2_, long jarg3, long jarg4);
  public final static native void ARmsk_convertTo3D(long jarg1, ARmsk jarg1_, long jarg2, long jarg3);
  public final static native void ARmsk_computeProjection(long jarg1, ARmsk jarg1_, long jarg2, long jarg3);
  public final static native void ARmsk_computeProjectionD(long jarg1, ARmsk jarg1_, long jarg2, long jarg3);
  public final static native void ARmsk_convertToPoints2d(long jarg1, ARmsk jarg1_, long jarg2, long jarg3);
  public final static native float ARmsk_getElementRotationVector(long jarg1, ARmsk jarg1_, int jarg2);
  public final static native float ARmsk_getElementTranslateVector(long jarg1, ARmsk jarg1_, int jarg2);
  public final static native float ARmsk_getElementRotationMatrix(long jarg1, ARmsk jarg1_, int jarg2, int jarg3);
  public final static native void ARmsk_renderTemplateOutline(long jarg1, ARmsk jarg1_, long jarg2, Mat jarg2_, int jarg3, long jarg4, image_pool jarg4_);
  public final static native void ARmsk_drawText(long jarg1, ARmsk jarg1_, int jarg2, long jarg3, image_pool jarg3_, String jarg4);
  public final static native void ARmsk_setTemplate(long jarg1, ARmsk jarg1_, int jarg2, long jarg3, image_pool jarg3_);
  public final static native void ARmsk_loadTemplate(long jarg1, ARmsk jarg1_, String jarg2);
  public final static native void ARmsk_detectAndDrawFeatures(long jarg1, ARmsk jarg1_, int jarg2, long jarg3, image_pool jarg3_);
  public final static native int ARmsk_getNumberTemplateKeypoints(long jarg1, ARmsk jarg1_);
  public final static native int ARmsk_getNumberTemplateDescriptors(long jarg1, ARmsk jarg1_);
  public final static native void ARmsk_initCorners(long jarg1, ARmsk jarg1_);
  public final static native float ARmsk_get_d(long jarg1, ARmsk jarg1_, int jarg2);
}
